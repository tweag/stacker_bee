#! /usr/bin/env ruby

$LOAD_PATH << File.expand_path(File.join(File.dirname(__FILE__), "..", "lib"))

require 'optparse'
require 'stacker_bee'
require 'json'
require 'yaml'
require 'irb'
require 'irb/completion'

cli_title = "StackerBee CloudStack REPL"

command  = File.basename(__FILE__)
options  = {}
verbose  = false
optparse = OptionParser.new do |opts|
  opts.banner = <<-BANNER.gsub(/^\s{4}/, '')
    #{cli_title}
    Usage: #{command} [options]
    Example: #{command} -u http://localhost:8080 -a MY_API_KEY -s MY_SECRET_KEY
  BANNER

  config_help = "StackerBee configuration file, formatted as YAML"
  opts.on('-c', '--config=/PATH/TO/CONFIG.yml', config_help) do |config|
    options[:config] = config
  end
  opts.on('-a', '--api_key=API_KEY', "CloudStack API Key") do |key|
    options[:api_key] = key
  end
  opts.on('-s', '--secret_key=SECRET_KEY', "CloudStack Secret Key") do |key|
    options[:secret_key] = key
  end
  opts.on('-u', '--url=URL', "CloudStack URL") do |url|
    options[:url] = url
  end
  opts.on('-v', '--[no-]verbose', 'Run verbosely') do |v|
    verbose = true
  end
  opts.on('-h', '--help', 'Display this screen') do
    puts opts

    puts
    puts "Example config file:"
    puts
    puts "url: 'http://127.0.0.1:1234/client/api'"
    puts "api_key: 'MY_KEY-MY_KEY-MY_KEY'"
    puts "secret_key: 'TOP-SECRET-TOP-SECRET'"

    exit
  end
end

begin
  optparse.parse!
  if options[:config]
    hash = File.read options[:config]
    options.merge! Hash[YAML.load(hash).map { |k,v| [k.to_sym, v] }]
  end
  unless options.keys.include?(:config) or ([:api_key, :secret_key, :url] - options.keys).empty?
    puts "Please specify a config file or all of the following: " \
         "--api_key, --secret_key and --url"
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $ERROR_INFO.to_s
  puts optparse
  exit
end

if verbose
  puts "StackerBee version #{StackerBee::VERSION}"
  puts "URL: #{options[:url]}"
  puts "API key: #{options[:api_key]}"
end

client = StackerBee::Client.new(options)

module IRB
  class << self
    def parse_opts
      # Don't touch ARGV
    end

    def start_session(object)
      setup nil
      workspace = WorkSpace.new(object)
      irb       = Irb.new(workspace)

      @CONF[:MAIN_CONTEXT] = irb.context      # rubocop:disable SymbolName
      trap('INT')      { irb.signal_handle }
      catch(:IRB_EXIT) { irb.eval_input }     # rubocop:disable SymbolName
    end
  end
end

puts cli_title
puts '  try: list_virtual_machines state: "Started"'
IRB.start_session client
